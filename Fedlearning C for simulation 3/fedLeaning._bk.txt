#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
// #include "genann.h"
#include "classification.h"
#include <unistd.h> 
#include "server.h"

// Configuración de la red neuronal
#define numberInputLayer  12
#define numberHiddenLayer  64
#define numberOutputLayer  12
// #define nodes 3
#define nodes 1

genann *ann_general;         // Modelo general
genann *ann_nodes[nodes];    // Modelos para cada nodo
const int numberEpochs = 0;
const int numberIterations = 0;

float learningRate = 0.1;
const float anneal = 0.995;

float input[nodes][numberInputLayer];
float output[nodes][numberOutputLayer];
float bestValues[numberInputLayer];
genann* ann;
int epoch = 0;
int iterations=0;
int iterationRead=0;
int experimentNumber=0;
float alpha = 0;
bool offlineTraining=false;
bool trainingDisabled = false;
bool testingDisabled = false;
bool useTransferLearning = true;
bool useFedAvg = true;

// Rutas de archivo
// const char *pathTrain[nodes] = {"trainId002.csv", "trainId003.csv", "trainId006.csv"};
const char *pathTrain[nodes] = {"trainId002.csv"};
// const char *pathTrain[nodes] = {"trainId002.csv", "trainId006.csv"};
// char *pathSaveWeights[nodes] = {"weights_train_node1.txt", "weights_train_node2.txt","weights_train_node3.txt"};
// char *pathSaveWeights[nodes] = {"weights_train_node1.txt", "weights_train_node2.txt"};
char *pathSaveWeights[nodes]= {"weights_train_node1.txt"};
char *pathSaveWeightsGlobal="weigthsGlobal.txt";
char *pathInitialWeights="weights_initial_node.txt";
const char *pathResult = "result.csv";
const char *pathIterationNumber = "IterationNumber.txt";

// String pathResult = "result.csv";
// String pathAnomalies = "anomaly.csv";
// String pathExperimentFile = "experimentNumber.txt";
const char *pathBest = "best.csv";
const char *pathTest = "testMachines.csv";
const char *pathVal = "valMachines.csv";
const char *pathAnomalies = "anomaly.csv";
const char *pathAnomaliesVal = "valanomaly.csv";
const char *pathwithin5 = "within5min.csv";
const char *pathmetrics = "metrics.csv";
const char *pathlabels = "labels.csv";
const char *resultsFilePath="results";


// String pathVal = "val.csv";
// String pathSaveWeights = "weights.txt";
// String pathIterationNumber = "IterationNumber.txt";

// Archivos
FILE *trainSetFile[nodes] = {NULL};
// FILE* trainSetFile;
FILE *resultFile = NULL;
FILE *testSetFile = NULL;
FILE *valSetFile = NULL;
FILE *testAnomaly = NULL;
FILE *valAnomaly = NULL;
FILE *wihitn5min=NULL;
FILE *metrics=NULL;
FILE *labels=NULL;
FILE *best = NULL;
FILE *iterationNumberFile = NULL;

// Variables globales
// int iterations = 0;
// int iterationRead = 16;
// bool useTransferLearning = false;

// Función para inicializar archivos
bool initFiles() {
    // Abrir archivos de entrenamiento
    for (int i = 0; i < nodes; i++) {
        trainSetFile[i] = fopen(pathTrain[i], "r");
        if (!trainSetFile[i]) {
            printf("No se pudo abrir el archivo de entrenamiento: %s\n", pathTrain[i]);
            return false;
        }
        printf("Archivo de entrenamiento %d abierto correctamente.\n", i + 1);
    }

    // trainSetFile = fopen(pathTrain, "r");
    // if (!trainSetFile) {
    //     printf("No se pudo abrir el archivo para verificar su contenido.\n");
    // } else {
    //     char testLine[256];
    //     if (fgets(testLine, sizeof(testLine), trainSetFile)) {
    //         printf("Primera línea del archivo: %s\n", testLine);
    //     } else {
    //         printf("El archivo está vacío o no se pudo leer.\n");
    //     }
    //     // fclose(trainSetFile);
    // }
    // Abrir archivo de resultados
    resultFile = fopen(pathResult, "w");
    if (!resultFile) {
        printf("No se pudo crear el archivo de resultados.\n");
        for (int i = 0; i < 3; i++) fclose(trainSetFile[i]);
        // fclose(trainSetFile); // Cerrar archivos abiertos
        return false;
    }
    printf("Archivo de resultados creado correctamente.\n");

    // Leer número de iteraciones desde archivo
    iterationNumberFile = fopen(pathIterationNumber, "r");
    if (!iterationNumberFile) {
        printf("No se pudo abrir el archivo de número de iteraciones: %s\n", pathIterationNumber);
        fclose(resultFile);
        for (int i = 0; i < 3; i++) fclose(trainSetFile[i]);
        // fclose(trainSetFile); // Cerrar archivos abiertos // Cerrar archivos abiertos
        return false;
    }

    if (fscanf(iterationNumberFile, "%d", &iterationRead) != 1) {
        printf("Error al leer el número de iteraciones.\n");
        fclose(iterationNumberFile);
        fclose(resultFile);
        for (int i = 0; i < 3; i++) fclose(trainSetFile[i]);
        // fclose(trainSetFile); // Cerrar archivos abiertos // Cerrar archivos abiertos
        return false;
    }
    fclose(iterationNumberFile); // Cerrar el archivo después de leerlo

    // Calcular iteraciones restantes
    iterations = numberIterations - iterationRead;
    if (iterations > 0) {
        useTransferLearning = true;
    }

    printf("Archivos inicializados correctamente.\n");
    return true;
}


bool initEstimationfiles(){

    testSetFile = fopen(pathTest, "r");
    if (!testSetFile) {
        printf("Could not create test file. \n");
        return false;
    }

    valSetFile = fopen(pathVal, "r");
    if (!valSetFile) {
        printf("Could not create test file. \n");
        // fclose(trainSetFile);
        // fclose(resultFile);
        fclose(testSetFile);
        return false;
    }
    // printf("3.1 \n");


    testAnomaly = fopen(pathAnomalies, "w");
    if (!testAnomaly) {
        printf("Could not create test anomaly file.");
        fclose(testSetFile);
        fclose(valSetFile);
        return false;
    }
    // printf("4 \n");

    valAnomaly= fopen(pathAnomaliesVal, "w");
    if (!valAnomaly) {
        printf("Could not create test anomaly file.");
        fclose(testSetFile);
        fclose(valSetFile);
        return false;
    }
    // printf("4 \n");

    wihitn5min= fopen(pathwithin5, "r");
    if (!wihitn5min) {
        printf("Could not create test anomaly file.");
        fclose(testSetFile);
        fclose(valSetFile);
        return false;
    }
    // printf("4 \n");

    metrics= fopen(pathmetrics, "a");
    if (!metrics) {
        printf("Could not create test anomaly file.");
        fclose(testSetFile);
        fclose(valSetFile);
        return false;
    }
    // printf("4 \n");

    labels= fopen(pathlabels, "r");
    if (!labels) {
        printf("Could not create test anomaly file.");
        fclose(testSetFile);
        fclose(valSetFile);
        return false;
    }
    // printf("4 \n");

    best = fopen(pathBest, "r");
    if (!best) {
        printf("Could not open test anomaly best threshold file.\n");
        fclose(testSetFile);
        fclose(testAnomaly);
        fclose(valAnomaly);
        fclose(valSetFile);
        return false;
    } else {
        char buffer[1024];
        if (fgets(buffer, sizeof(buffer), best) == NULL) {
            printf("Error: Could not read from the file.\n");
            fclose(best);
            fclose(testSetFile);
            fclose(testAnomaly);
            fclose(valAnomaly);
            fclose(valSetFile);
            return false;
        }

        int count = 0;
        char *token = strtok(buffer, ",");
        while (token != NULL && count < numberInputLayer) {
            bestValues[count] = strtof(token, NULL);  // Convertir el valor a float y almacenarlo
            // printf("Value %d: %f\n", count, bestValues[count]); // Imprimir el valor leído
            count++;
            token = strtok(NULL, ",");
        }

        if (count != numberInputLayer) {
            printf("Error: The number of values in the file does not match 'numberInputLayer'.\n");
            fclose(best);
            fclose(testSetFile);
            fclose(testAnomaly);
            fclose(valAnomaly);
            fclose(valSetFile);
            return false;
        }

        fclose(best);  // Cerrar el archivo después de procesarlo
        
    }

    printf("All files processed correctly \n");
    // printf("5 \n");

    return true;




}

void execute(int epoch) {
    for (int i = 0; i < nodes; i++) {
        if (!trainSetFile[i]) {
            printf("Archivo de entrenamiento no disponible para el nodo %d.\n", i + 1);
            continue;
        }

        fseek(trainSetFile[i], 0, SEEK_END);
        // long fileSize = ftell(trainSetFile);
        // printf("Tamaño del archivo: %ld bytes\n", fileSize);

        // if (fileSize == 0) {
        //     printf("El archivo está vacío.\n");
        //     continue;
        // }

        // fseek(trainSetFile, 0, SEEK_SET); // Vuelve al inicio del archivo

        // Reiniciar el archivo al inicio
     //     fseek(trainSetFile[i], 0, SEEK_SET);

        // Entrenamiento del nodo
        printf("Nodo %d: Iniciando entrenamiento para la epoca %d...\n", i + 1, epoch + 1);
        startTrainingTimer();
        // while (readData(trainSetFile[i], input[i], output[i])) {
        //     genann_train(ann_nodes[i], input[i], output[i], learningRate);
        // }
        printTrainingTimer(epoch + 1, resultFile);

        // Reducir el learning rate
        learningRate *= anneal;

        // Evaluación del nodo
        fseek(trainSetFile[i], 0, SEEK_SET);
        // resetMetrics();
        while (readData(trainSetFile[i], input[i], output[i])) {
            genann_train(ann_nodes[i], input[i], output[i], learningRate);
        }
        printf("Nodo %d: Epoca %d completada.\n", i + 1, epoch + 1);

        // Guardar pesos del nodo
        saveWeightsJson(ann_nodes[i], pathSaveWeights[i], getNumberDataset());
    }
}


void loop() {
    while(true){
        if (!offlineTraining){
            if( !trainingDisabled  && iterations < numberIterations){
                for(int i=0; i<numberEpochs; i++ ){
                    execute(epoch);
                    epoch++;
                }
                printf("Iteration Number:%d  finished \n", iterations);
                // fedAvg(ann_nodes, nodes, pathSaveWeightsGlobal);
                fedAvg(ann_nodes, nodes, pathSaveWeightsGlobal, pathInitialWeights, alpha);
                iterations++;
                epoch=0;
                if(iterations >= numberIterations || useFedAvg){
                    if(iterations >= numberIterations){
                        printf("Training ended.");
                        trainingDisabled = true;
                        //resultFile.close();
                        
                        for (int i = 0; i < 3; i++) fclose(trainSetFile[i]);

                        initEstimationfiles();
                        fseek(testSetFile, 0, SEEK_SET);
                        fseek(wihitn5min, 0, SEEK_SET);
                        char withinBuffer[1024]; 
                        // printf("llego \n");
                        while (readData(testSetFile, input[0], output[0])) {
                            if (fgets(withinBuffer, sizeof(withinBuffer), wihitn5min) == NULL) {
                                printf("Error: Synchronization issue, within5min file has fewer lines than testSetFile.\n");
                                break; // Termina si no hay más líneas en within5min
                            }
                            bool within5minbool = (strstr(withinBuffer, "true") != NULL);

                            // Llamar a predictAnomaly con el nuevo parámetro
                            predictAnomaly(testAnomaly, ann_nodes[0], input[0], output[0], bestValues, within5minbool, metrics);
                        }
                         printf("Estimation end \n");

                        //  fclose(metrics);
                         fclose(labels);

                        

                        if (calculateMetrics(pathmetrics, pathlabels, resultsFilePath)) {
                            printf("Metrics calculated and saved successfully.\n");
                        } else {
                            printf("Error calculating metrics.\n");
                        }

                        fseek(valSetFile, 0, SEEK_SET);
                        while (readData(valSetFile, input[0], output[0])) {
                            bool within5minbool=false;
                            predictAnomaly(valAnomaly, ann_nodes[0], input[0], output[0], bestValues, within5minbool, metrics);
                        }





                        // fclose(resultFile);
                        // iterationFinished=true;


                        //testSetFile.close();
                    }
                }
            }
        }

        // 

    }
    
    

    
}

// Función principal
int main() {
    
    if(!trainingDisabled || !testingDisabled){
      if(!initFiles()){
        printf("Initialization failed. Exit");
        while(1);
        return 0;
      }
    }

    initDataframe(numberInputLayer, numberOutputLayer);
    initMetrics(numberOutputLayer);

    ann_general = genann_init(numberInputLayer, 2, numberHiddenLayer, numberOutputLayer, "tanh");

    for (int i = 0; i < nodes; i++) {
        ann_nodes[i] = genann_init(numberInputLayer, 2, numberHiddenLayer, numberOutputLayer, "tanh");
        if (useTransferLearning) {
            printf("Loading transfer learning model for node %d...\n", i + 1);
            char filename[256];  // Asegúrate de que el buffer sea lo suficientemente grande
            sprintf(filename, "weights_node%d.txt", i + 1);  // Formatear el nombre del archivo
            loadWeightsJson(ann_nodes[i], filename);  // Pasar el nombre del archivo formateado
            printf("Transfer learning model loaded for node %d.\n", i + 1);
        } else {
            genann_randomize(ann_nodes[i]);
        }
    }

    printf("Programa iniciado.\n");


    // fclose(resultFile);
    // // for (int i = 0; i < 3; i++) fclose(trainSetFile[i]);
    // fclose(trainSetFile); // Cerrar archivos abiertos


    // printf("Programa finalizado.\n");
    loop();

    return EXIT_SUCCESS;

}



